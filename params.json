{
  "name": "Pyblog",
  "tagline": "Pyblog 是一个简单易用的在线 Markdown 博客系统，它使用 Python 的 flask 架构，理论上支持所有 flask-sqlalchemy 所能支持的数据库。博客的内容全部是 Markdown 格式，你只需要将写好的 Markdown文件的内容提交即可。同时支持多说评论，百度统计，代码高亮等常用功能。",
  "body": "# Pyblog —— 喜欢Markdown，爱上Pyblog!\r\n\r\n> Pyblog 是一个简单易用的在线 Markdown 博客系统，它使用 Python 的 flask 架构，理论上支持所有 flask-sqlalchemy 所能支持的数据库。博客的内容全部是 Markdown 格式，你只需要将写好的 Markdown文件的内容提交即可。同时支持多说评论，百度统计，代码高亮等常用功能。\r\n\r\n## 使用用法\r\n### 应用环境介绍\r\n- 支持 Linux 系统，本程序默认为 Ubuntu 14.04 - 16.04 系统。\r\n- 默认的python， 2.7.6 - 2.7.11+。\r\n- Ubuntu 系统默认安装的nginx。\r\n- 默认使用系统自带的 sqlite 数据库。\r\n\r\n### 文件组织架构\r\n\r\n```bash\r\ngyblog/\r\n    app/\r\n    config.py\r\n    manage.py\r\n```\r\n\r\n### 前提条件\r\n\r\n```bash\r\nsudo apt-get install python-setuptools\r\nsudo easy_install pip\r\nsudo pip install virtualenv\r\n```\r\n\r\n### 安装 nginx\r\n\r\n```bash\r\n$ sudo add-apt-repository ppa:nginx/stable\r\n$ sudo apt-get update && sudo apt-get upgrade\r\n$ sudo apt-get install build-essential python python-dev\r\n$ sudo apt-get install nginx\r\n```\r\n\r\n### 运行 nginx\r\n\r\n```bash\r\n$ sudo /etc/init.d/nginx start\r\n```\r\n\r\nNginx是一个提供静态文件访问的web服务，然而，它不能直接执行托管Python应用程序，而uWSGI解决了这个问题。让我们先安装uWSGI，稍候再配置Nginx和uWSGI之间的交互。\r\n\r\n### 安装 uWSGI\r\n\r\n```bash\r\nsudo pip install uwsgi\r\n```\r\n### 安装 flask 的虚拟环境\r\n\r\n```bash\r\n$ cd /var/www\r\n$ sudo apt-get install python-virtualenv\r\n$ sudo mkdir pyblog #可以自定义目录的命名\r\n$ sudo chown os373:os373 -R pyblog/\r\n$ git clone git@github.com:eastossifrage/pyblog.git\r\n$ cd pyblog \r\n$ virtualenv flask\r\n$ source flask/bin/activate\r\n(flask)$\r\n(flask)$ pip install -r requirements.txt\r\n```\r\n\r\n### 配置 nginx\r\n\r\n首先删除掉Nginx的默认配置文件：\r\n\r\n```bash\r\nsudo rm /etc/nginx/sites-enabled/default\r\n```\r\n\r\n#### 设置nginx用户组\r\n\r\n修改nginx配置`/etc/nginx/nginx.conf`的启动用户\r\n\r\n```bash\r\n第1行 user os373  #最好是系统的当前用户\r\n```\r\n\r\n#### 新建 nginx 配置文件 `/var/www/pyblog/pyblog_nginx.conf`：\r\n\r\n```bash\r\n\r\nserver {\r\n        listen 80;\r\n        server_name os373.cn; # 自己的网站域名\r\n        charset utf-8;\r\n        client_max_body_size 75M;\r\n\r\n        location / {\r\n                try_files $uri @pyblog;\r\n        }\r\n        location @pyblog {\r\n                include uwsgi_params;\r\n                uwsgi_pass unix:/var/www/pyblog/pyblog_uwsgi.sock;\r\n        }\r\n}\r\n```\r\n\r\n将刚建立的配置文件使用符号链接到Nginx配置文件文件夹中\r\n\r\n```bash\r\nsudo ln -s /var/www/pyblog/pyblog_nginx.conf /etc/nginx/conf.d/\r\n```\r\n\r\n### 配置 uWSGI\r\n\r\n#### 设置目录的用户权限\r\n最好和 nginx 的进程用户一致，此处同为当前用户 os373。\r\n\r\n```bash\r\nsudo mkdir /var/log/uwsgi\r\nsudo chown -R os373:os373 /var/www/pyblog/\r\nsudo chown -R os373:os373 /var/log/uwsgi/\r\n```\r\n#### uWSGI配置文件\r\n创建一个新的uWSGI配置文件/var/www/pyblog/pyblog_uwsgi.ini\r\n\r\n```bash\r\n[uwsgi]\r\nbase = /var/www/pyblog\r\napp = manage\r\nmodule = %(app)\r\n\r\nhome = %(base)/flask\r\npythonpath = %(base)\r\nsocket = /var/www/pyblog/%n.sock\r\nmaster = true\r\nprocesses = 8\r\nworkers = 2\r\nchmod-socket = 644\r\ncallable = app\r\nlogto = /var/log/uwsgi/%n.log\r\n\r\n```\r\n\r\n执行uWSGI，用新创建的配置文件作为参数：\r\n\r\n```bash\r\nuwsgi --ini /var/www/pybolg/pyblog_uwsgi.ini\r\n```\r\n\r\n我们的工作现在基本完成了，唯一剩下的事情是配置uWSGI在后台运行，这是uWSGI Emperor的职责。\r\n\r\n#### 1 - uWSGI Emperor (在 ubuntu14.04上实验成功)\r\n\r\n创建一个初始配置来运行emperor - `sudo vi /etc/init/uwsgi.conf`：\r\n\r\n```bash\r\ndescription \"uWSGI\"\r\nstart on runlevel [2345]\r\nstop on runlevel [06]\r\nrespawn\r\n \r\nenv UWSGI=/usr/local/bin/uwsgi\r\nenv LOGTO=/var/log/uwsgi/emperor.log\r\n \r\nexec $UWSGI --master --emperor /etc/uwsgi/vassals --die-on-term --uid os373 --gid os373 --logto $LOGTO\r\n```\r\n\r\n最后一行运行uWSGI守护进程并让它到`/etc/uwsgi/vassals`文件夹查找配置文件。创建这个文件夹，在其中建立一个到链到我们刚创建配置文件的符号链接。\r\n\r\n```bash\r\nsudo mkdir /etc/uwsgi && sudo mkdir /etc/uwsgi/vassals\r\nsudo ln -s /var/www/pyblog/pyblog_uwsgi.ini /etc/uwsgi/vassals\r\n```\r\n\r\n#### 2 - 添加 uWSGI Emperor 服务到 systemd (在 ubuntu16.04上实验成功)\r\n\r\n这里有一个知识点，就是ubuntu 16.04 使用了systemd来管理启动项\r\n首先，创建 ` sudo vi /etc/systemd/system/uwsgi.service` 文件，内容如下：\r\n\r\n```bash\r\n[Unit]\r\nDescription=uWSGI Emperor\r\nAfter=syslog.target\r\n\r\n[Service]\r\nExecStart=/usr/local/bin/uwsgi --master --emperor /etc/uwsgi/vassals --uid os373 --gid os373 --logto /var/log/wuwsgi/emperor.log\r\nRestart=always\r\nKillSignal=SIGQUIT\r\nType=notify\r\nNotifyAccess=all\r\n\r\n[Install]\r\nWantedBy=multi-user.target\r\n```\r\n\r\n配置文件`/etc/uwsgi/vassals`。创建这个文件夹，在其中建立一个到链到我们刚创建配置文件的符号链接。\r\n\r\n```bash\r\nsudo mkdir /etc/uwsgi && sudo mkdir /etc/uwsgi/vassals\r\nsudo ln -s /var/www/pyblog/pyblog_uwsgi.ini /etc/uwsgi/vassals\r\n```\r\n\r\n现在，flask应用就应该配置完成了。\r\n\r\n### 配置flask应用数据库\r\n\r\n```bash\r\n(flask)$ python manage.py db init\r\n(flask)$ python manage.py db migrate -m \"initial migration\"\r\n(flask)$ python manage.py db upgrade\r\n```\r\n\r\n### 重新启动服务\r\n\r\n```bash\r\nsudo service nginx restart\r\nsudo service uwsgi restart\r\n```\r\n\r\n你可以查看`/var/log/uwsgi/`文件夹下的access.log和error.log内容，并根据提示来判断程序是否正常运行。\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}